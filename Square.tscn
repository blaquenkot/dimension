[gd_scene load_steps=6 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody

export(NodePath) var initial_rail
var rail
var speed = 20
var idle_speed = speed/4
var leap_distance = speed
var last_direction

func _ready():
	rail = get_node(initial_rail)
	translation.x = 0
	translation.z = 0
	snap_to_rail(rail)
	$RayCastForward.cast_to.x = leap_distance
	$RayCastBackward.cast_to.x = -leap_distance

func _process(delta):
	if Input.is_action_just_pressed(\"right\"):
		if last_direction == \"right\" && !$LeapTimer.is_stopped():
			leap(Vector3.RIGHT)
		else:
			$LeapTimer.start()

	if Input.is_action_just_pressed(\"left\"):
		if last_direction == \"left\" && !$LeapTimer.is_stopped():
			leap(Vector3.LEFT)
		else:
			$LeapTimer.start()

	var velocity = Vector3.RIGHT * idle_speed * delta
	if Input.is_action_pressed(\"right\"):
		last_direction = \"right\"
		velocity += Vector3.RIGHT * speed * delta
	elif Input.is_action_pressed(\"left\"):
		last_direction = \"left\"
		velocity += Vector3.LEFT * speed * delta
	
	move_and_collide(velocity)

	if Input.is_action_just_pressed(\"up\"):
		var rail_above = get_rail_above()

		if rail_above:
			snap_to_rail(rail_above)
			rail = rail_above
	elif Input.is_action_just_pressed(\"down\"):
		var rail_below = get_rail_below()

		if rail_below:
			snap_to_rail(rail_below)
			rail = rail_below

func leap(direction):
	$LeapTimer.stop()
	visible = false
	$CollisionShape.set_disabled(true)

	var leap_rail

	if direction.x > 0:
		leap_rail = get_rail_for_forward_leap()
	else:
		leap_rail = get_rail_for_backward_leap()
	
	if leap_rail:
		translation += leap_distance * direction
		rail = leap_rail
	else:
		move_and_collide(direction * leap_distance)

	visible = true
	$CollisionShape.set_disabled(false)

func snap_to_rail(rail):
	translation.y = rail.translation.y

func get_rail_above():
	return $RayCastUp.get_collider()

func get_rail_below():
	return $RayCastDown.get_collider()

func get_rail_for_forward_leap():
	return $RayCastForward.get_collider()

func get_rail_for_backward_leap():
	return $RayCastBackward.get_collider()"

[sub_resource type="Shader" id=2]
code = "shader_type spatial;

void fragment() {
	ALBEDO.x = UV.x * max(0.4, sin(TIME*5.0));
	ALBEDO.y = UV.y * max(0.4, cos(TIME*5.0));
	ALBEDO.z = UV.r * max(0.4, tan(TIME*5.0));
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )

[sub_resource type="CubeMesh" id=4]
material = SubResource( 3 )

[sub_resource type="ConvexPolygonShape" id=5]
points = PoolVector3Array( -1, 1, 1, 1, 1, -1, 1, 1, 1, -1, 1, -1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, -1, -1, 1, 1, 1, -1, 1, -1, 1, 1, -1, -1, 1, 1, 1, -1, 1, -1, -1, -1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1 )

[node name="KinematicBody" type="KinematicBody"]
collision_mask = 8
script = SubResource( 1 )

[node name="MeshInstance" type="MeshInstance" parent="."]
mesh = SubResource( 4 )
material/0 = null

[node name="CollisionShape" type="CollisionShape" parent="."]
shape = SubResource( 5 )

[node name="LeapTimer" type="Timer" parent="."]
wait_time = 0.3
one_shot = true

[node name="RayCastUp" type="RayCast" parent="."]
enabled = true
cast_to = Vector3( 0, 100, 0 )
collision_mask = 4

[node name="RayCastDown" type="RayCast" parent="."]
enabled = true
cast_to = Vector3( 0, -100, 0 )
collision_mask = 4

[node name="RayCastForward" type="RayCast" parent="."]
enabled = true
cast_to = Vector3( 1, 0, 0 )
collision_mask = 4

[node name="RayCastBackward" type="RayCast" parent="."]
enabled = true
cast_to = Vector3( 1, 0, 0 )
collision_mask = 4
